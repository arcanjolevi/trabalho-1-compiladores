README.doc - Descrição do trabalho

Nome do software: Compilador

Nome do aluno: Levi Cicero Arcanjo

Descrição da linguagem:
    • Subconjunto de C, incluido declaração de variáveis int, char, float. Permitindo o uso dos operadores de soma, multiplicação subtração, divisão, operadores lógicos maior e menor, comandos condicionais (if e else) e loops (while e for).
    • Nomes variáveis podendo iniciar com qualquer letra de a-z, A-Z ou underline seguidas por qualquer letra de a-z, A-Z, underline e numeros.
    • Palavras reservadas são: int, char, float, double, void, if, else, while, main, return e for


Classes de Tokens:
Palavra int                 -> Expressão regular: ^[i][n][t]$
Palavra char                -> Expressão regular: ^[c][h][a][r]$
Palavra float               -> Expressão regular: ^[f][l][o][a][t]$
Palavra void                -> Expressão regular: ^[v][o][i][d]$
Palavra if                  -> Expressão regular: ^[i][f]$
Palavra else                -> Expressão regular: ^[e][l][s][e]$
Palavra while               -> Expressão regular: ^[w][h][i][l][e]$
Palavra main                -> Expressão regular: ^[m][a][i][n]$
Palavra return              -> Expressão regular: ^[r][e][t][u][r][n]$
Palavra for                 -> Expressão regular: ^[f][o][r]$
simbolo abre parênteses     -> Expressão regular: ^[(]$
Símbolo fecha parênteses    -> Expressão regular: ^[)]$
Símbolo abre chaves         -> Expressão regular: ^[{]$
Símbolo fecha chaves        -> Expressão regular: ^[}]$
Símbolo de soma             -> Expressão regular: ^[+]$
Símbolo de subtração        -> Expressão regular: ^[-]$
Símbolo de multiplicação    -> Expressão regular: ^[*]$
Simbolo de divisão          -> Expressão regular: ^[/]$
Símbolo ponto e vígula      -> Expressão regular: ^[;]$
Simbolo de Virgula	        -> Expressao regular: ^[,]$
Símbolo de atribuição       -> Expressão regular: ^[=]$
Simbolo and                 -> Expressão regular: ^[&]$
Simbolo ou                  -> Expressão regular: ^[|]$
Simbolo maior               -> Expressão regular: ^[>]$
Símbolo menor               -> Expressão regular: ^[<]$
Símbolo abre colchetes      -> Expressão regular: ^[[]$
Símbolo fecha colchetes     -> Expressão regular: ^[\]]$
Caracter                    -> Expressão regular: ^['].[']$
String                      -> Expressão regular: ^["].*["]$
Número                      -> Expressão regular: ^[0-9]+$
Número decimal              -> Expressão regular: ^[0-9]+[.][0-9]+$
identificador               -> Expressão regular: ^[_a-z][_a-z0-9]*$
  
  
  
Descrição do funcionamento do software:
  - Funciona no navegador
  - Abrir o index.html com o navegador
  - Selecionar o arquivo clicando no botão "selecionar arquivo"
  - Clicar no botão "Fazer análise" para inciar a análise
  - Caso existam erros, serão mostrados na tela

Descrição do tratamento de erros:
	- Neste analizador os erros lexicos são identificados através de expressões regulares, logo após ser constatado que o token está mal escrito é chamado um método denominado describeLexicalError() que determina qual tipo de erro o token apresenta.
  - Este analisador léxico reconhece os seguitnes erros expecificamente:
    - Identificador mal formado -> Quando um identificador inicia com numeros
    - Número mal formado-> Quando existe um numero com letras e pontos
    - Caracter mal formado -> Quando um caracter possui tamanho maior que um ou aspas simples a menos
    - String mal formada -> Quando possui aspas duplas a menos
    - Símbolo desconhecido -> Quando o simbolo apresentado não faz parte da linguagem
  

Descrição do processo de construção:
  - Não é necessário nehum tipo de processo de build
  - Apenas é necessário ter instalado um navegador web

Trechos de código associados a expressões regulares e as regras gramaticas estão anexadas como imagens na mesma pasta deste arquivo

Referências usadas:
  - https://www.w3schools.com/
  - https://developer.mozilla.org/
  - https://javascript.info/
  - https://pt.stackoverflow.com/
  - Slides de compiladores (Aula 0, 1 e 2, 3, 4, 5)
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  


    
