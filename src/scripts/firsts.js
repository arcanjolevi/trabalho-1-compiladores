const firsts = {
  S: ["int", "float", "char", "void", "λ"],
  S0: ["semicolon"],
  DECLARATION: ["int", "float", "char", "void"],
  DECLARATION_: ["semicolon", "coma"],
  IDENTIFIER: ["id"],
  TYPE: ["int", "float", "char", "void"],
  VALUE: ["number", "decimal", "string", "character"],
  FUNCTION: ["int", "float", "char", "void"],
  FUNCTION_: ["openParentheses"],
  F0: ["int", "float", "char", "void", "λ"],
  F1: ["coma", "openBracket", "λ"],
  F2: ["number", "λ"],
  ITERATION: ["while", "for"],
  SELECTION: ["if"],
  ELSE: ["else"],
  OPERATOR: [
    "plus",
    "minus",
    "multiply",
    "div",
    "equal",
    "and",
    "less",
    "greater",
  ],
  STATEMENT__: [
    "if",
    "while",
    "for",
    "id",
    "number",
    "decimal",
    "string",
    "character",
    "return",
  ],
  RETURN: ["return"],
  S0_: ["int", "float", "char", "void", "λ"],
  ASSIGNMENT: ["id", "number", "decimal", "string", "character"],
  ASSIGNMENT_: [
    "equal",
    "plus",
    "minus",
    "multiply",
    "div",
    "equal",
    "and",
    "less",
    "greater",
    "λ",
  ],
  PRIMARY: ["id", "number", "decimal", "string", "character"],
  EXPRESION: ["id", "number", "decimal", "string", "character"],
  EXPRESION_: ["coma", "λ"],
  STATEMENT: ["openBracket"],
  STATEMENT_: [
    "if",
    "while",
    "for",
    "id",
    "number",
    "decimal",
    "string",
    "character",
    "int",
    "float",
    "char",
    "void",
    "λ",
    "return",
  ],
  ITERATION_: ["id", "number", "decimal", "string", "character", "λ"],
};
